#!/bin/bash
set -euo pipefail

# 🚀 Dart Environment Configuration Generator for iOS Workflow
# Generates environment.dart with all workflow variables for Dart code

# Enhanced logging
log() { echo "[$(date +'%Y-%m-%d %H:%M:%S')] [DART_ENV] $1"; }
log_info() { log "ℹ️ $1"; }
log_success() { log "✅ $1"; }
log_warning() { log "⚠️ $1"; }
log_error() { log "❌ $1"; }

# Configuration
DART_ENV_FILE="lib/config/environment.dart"
DART_ENV_BACKUP="lib/config/environment.dart.backup.$(date +%Y%m%d_%H%M%S)"
DART_ENV_TEMP="lib/config/environment.dart.tmp"

# Validate required environment variables
validate_required_vars() {
    log_info "🔍 Validating required environment variables..."
    
    local required_vars=(
        "WORKFLOW_ID"
        "PROJECT_ID"
        "APP_NAME"
        "VERSION_NAME"
        "VERSION_CODE"
        "BUNDLE_ID"
        "APPLE_TEAM_ID"
    )
    
    local missing_vars=()
    
    for var in "${required_vars[@]}"; do
        if [[ -z "${!var:-}" ]]; then
            missing_vars+=("$var")
        fi
    done
    
    if [[ ${#missing_vars[@]} -gt 0 ]]; then
        log_warning "⚠️ Missing required variables: ${missing_vars[*]}"
        log_warning "🔄 Using default values for missing variables"
        return 1
    else
        log_success "✅ All required variables present"
        return 0
    fi
}

# Generate Dart environment configuration
generate_dart_environment() {
    log_info "📝 Generating Dart environment configuration..."
    
    # Backup existing file
    if [[ -f "$DART_ENV_FILE" ]]; then
        cp "$DART_ENV_FILE" "$DART_ENV_BACKUP"
        log_info "📋 Backed up existing environment.dart to $DART_ENV_BACKUP"
    fi
    
    # Create temporary file
    cat > "$DART_ENV_TEMP" << 'EOF'
import 'package:flutter/foundation.dart';

/// 🚀 iOS Workflow Environment Configuration
/// 
/// This file is automatically generated by Codemagic iOS workflow.
/// It provides type-safe access to all environment variables with
/// proper fallbacks for development and production builds.
/// 
/// Generated on: $(date)
/// Workflow: ${WORKFLOW_ID:-ios-workflow}
/// Platform: iOS

class Environment {
  Environment._();

  // ===== CORE APP CONFIGURATION =====
  
  /// App name from workflow configuration
  static const String appName = String.fromEnvironment(
    'APP_NAME',
    defaultValue: '${APP_NAME:-QuikApp}',
  );

  /// Version name from workflow
  static const String versionName = String.fromEnvironment(
    'VERSION_NAME',
    defaultValue: '${VERSION_NAME:-1.0.0}',
  );

  /// Version code from workflow
  static const int versionCode = int.fromEnvironment(
    'VERSION_CODE',
    defaultValue: ${VERSION_CODE:-1},
  );

  /// Bundle ID for iOS
  static const String bundleId = String.fromEnvironment(
    'BUNDLE_ID',
    defaultValue: '${BUNDLE_ID:-com.example.app}',
  );

  /// Workflow ID from Codemagic
  static const String workflowId = String.fromEnvironment(
    'WORKFLOW_ID',
    defaultValue: '${WORKFLOW_ID:-ios-workflow}',
  );

  /// Project ID from Codemagic
  static const String projectId = String.fromEnvironment(
    'PROJECT_ID',
    defaultValue: '${PROJECT_ID:-unknown}',
  );

  // ===== USER & ORGANIZATION =====
  
  /// User name from workflow
  static const String userName = String.fromEnvironment(
    'USER_NAME',
    defaultValue: '${USER_NAME:-User}',
  );

  /// App ID from workflow
  static const String appId = String.fromEnvironment(
    'APP_ID',
    defaultValue: '${APP_ID:-unknown}',
  );

  /// Organization name from workflow
  static const String orgName = String.fromEnvironment(
    'ORG_NAME',
    defaultValue: '${ORG_NAME:-Organization}',
  );

  /// Web URL from workflow
  static const String webUrl = String.fromEnvironment(
    'WEB_URL',
    defaultValue: '${WEB_URL:-https://example.com}',
  );

  /// Package name (Android equivalent)
  static const String packageName = String.fromEnvironment(
    'PKG_NAME',
    defaultValue: '${PKG_NAME:-com.example.app}',
  );

  /// Email ID from workflow
  static const String emailId = String.fromEnvironment(
    'EMAIL_ID',
    defaultValue: '${EMAIL_ID:-user@example.com}',
  );

  // ===== FEATURE FLAGS =====
  
  /// Push notification support
  static const bool pushNotify = bool.fromEnvironment(
    'PUSH_NOTIFY',
    defaultValue: ${PUSH_NOTIFY:-false},
  );

  /// Chatbot functionality
  static const bool isChatbot = bool.fromEnvironment(
    'IS_CHATBOT',
    defaultValue: ${IS_CHATBOT:-false},
  );

  /// Domain URL functionality
  static const bool isDomainUrl = bool.fromEnvironment(
    'IS_DOMAIN_URL',
    defaultValue: ${IS_DOMAIN_URL:-false},
  );

  /// Splash screen functionality
  static const bool isSplash = bool.fromEnvironment(
    'IS_SPLASH',
    defaultValue: ${IS_SPLASH:-false},
  );

  /// Pull to refresh functionality
  static const bool isPulldown = bool.fromEnvironment(
    'IS_PULLDOWN',
    defaultValue: ${IS_PULLDOWN:-false},
  );

  /// Bottom menu functionality
  static const bool isBottomMenu = bool.fromEnvironment(
    'IS_BOTTOMMENU',
    defaultValue: ${IS_BOTTOMMENU:-false},
  );

  /// Loading indicator functionality
  static const bool isLoadIndicator = bool.fromEnvironment(
    'IS_LOAD_IND',
    defaultValue: ${IS_LOAD_IND:-false},
  );

  // ===== AUTHENTICATION =====
  
  /// Google authentication support
  static const bool isGoogleAuth = bool.fromEnvironment(
    'IS_GOOGLE_AUTH',
    defaultValue: ${IS_GOOGLE_AUTH:-false},
  );

  /// Apple authentication support
  static const bool isAppleAuth = bool.fromEnvironment(
    'IS_APPLE_AUTH',
    defaultValue: ${IS_APPLE_AUTH:-false},
  );

  // ===== PERMISSIONS =====
  
  /// Camera permission
  static const bool isCamera = bool.fromEnvironment(
    'IS_CAMERA',
    defaultValue: ${IS_CAMERA:-false},
  );

  /// Location permission
  static const bool isLocation = bool.fromEnvironment(
    'IS_LOCATION',
    defaultValue: ${IS_LOCATION:-false},
  );

  /// Microphone permission
  static const bool isMic = bool.fromEnvironment(
    'IS_MIC',
    defaultValue: ${IS_MIC:-false},
  );

  /// Notification permission
  static const bool isNotification = bool.fromEnvironment(
    'IS_NOTIFICATION',
    defaultValue: ${IS_NOTIFICATION:-false},
  );

  /// Contact permission
  static const bool isContact = bool.fromEnvironment(
    'IS_CONTACT',
    defaultValue: ${IS_CONTACT:-false},
  );

  /// Biometric permission
  static const bool isBiometric = bool.fromEnvironment(
    'IS_BIOMETRIC',
    defaultValue: ${IS_BIOMETRIC:-false},
  );

  /// Calendar permission
  static const bool isCalendar = bool.fromEnvironment(
    'IS_CALENDAR',
    defaultValue: ${IS_CALENDAR:-false},
  );

  /// Storage permission
  static const bool isStorage = bool.fromEnvironment(
    'IS_STORAGE',
    defaultValue: ${IS_STORAGE:-false},
  );

  // ===== UI & BRANDING =====
  
  /// Logo URL
  static const String logoUrl = String.fromEnvironment(
    'LOGO_URL',
    defaultValue: '${LOGO_URL:-}',
  );

  /// Splash screen logo URL
  static const String splashUrl = String.fromEnvironment(
    'SPLASH_URL',
    defaultValue: '${SPLASH_URL:-}',
  );

  /// Splash screen background URL
  static const String splashBgUrl = String.fromEnvironment(
    'SPLASH_BG_URL',
    defaultValue: '${SPLASH_BG_URL:-}',
  );

  /// Splash screen background color
  static const String splashBgColor = String.fromEnvironment(
    'SPLASH_BG_COLOR',
    defaultValue: '${SPLASH_BG_COLOR:-#FFFFFF}',
  );

  /// Splash screen tagline
  static const String splashTagline = String.fromEnvironment(
    'SPLASH_TAGLINE',
    defaultValue: '${SPLASH_TAGLINE:-Welcome}',
  );

  /// Splash screen tagline color
  static const String splashTaglineColor = String.fromEnvironment(
    'SPLASH_TAGLINE_COLOR',
    defaultValue: '${SPLASH_TAGLINE_COLOR:-#000000}',
  );

  /// Splash screen tagline font
  static const String splashTaglineFont = String.fromEnvironment(
    'SPLASH_TAGLINE_FONT',
    defaultValue: '${SPLASH_TAGLINE_FONT:-Roboto}',
  );

  /// Splash screen tagline size
  static const String splashTaglineSize = String.fromEnvironment(
    'SPLASH_TAGLINE_SIZE',
    defaultValue: '${SPLASH_TAGLINE_SIZE:-24}',
  );

  /// Splash screen tagline bold
  static const bool splashTaglineBold = bool.fromEnvironment(
    'SPLASH_TAGLINE_BOLD',
    defaultValue: ${SPLASH_TAGLINE_BOLD:-false},
  );

  /// Splash screen tagline italic
  static const bool splashTaglineItalic = bool.fromEnvironment(
    'SPLASH_TAGLINE_ITALIC',
    defaultValue: ${SPLASH_TAGLINE_ITALIC:-false},
  );

  /// Splash screen animation
  static const String splashAnimation = String.fromEnvironment(
    'SPLASH_ANIMATION',
    defaultValue: '${SPLASH_ANIMATION:-fade}',
  );

  /// Splash screen duration
  static const int splashDuration = int.fromEnvironment(
    'SPLASH_DURATION',
    defaultValue: ${SPLASH_DURATION:-3000},
  );

  // ===== BOTTOM MENU CONFIGURATION =====
  
  /// Bottom menu items JSON
  static const String bottomMenuItems = String.fromEnvironment(
    'BOTTOMMENU_ITEMS',
    defaultValue: '${BOTTOMMENU_ITEMS:-[]}',
  );

  /// Bottom menu background color
  static const String bottomMenuBgColor = String.fromEnvironment(
    'BOTTOMMENU_BG_COLOR',
    defaultValue: '${BOTTOMMENU_BG_COLOR:-#FFFFFF}',
  );

  /// Bottom menu icon color
  static const String bottomMenuIconColor = String.fromEnvironment(
    'BOTTOMMENU_ICON_COLOR',
    defaultValue: '${BOTTOMMENU_ICON_COLOR:-#666666}',
  );

  /// Bottom menu text color
  static const String bottomMenuTextColor = String.fromEnvironment(
    'BOTTOMMENU_TEXT_COLOR',
    defaultValue: '${BOTTOMMENU_TEXT_COLOR:-#333333}',
  );

  /// Bottom menu font
  static const String bottomMenuFont = String.fromEnvironment(
    'BOTTOMMENU_FONT',
    defaultValue: '${BOTTOMMENU_FONT:-Roboto}',
  );

  /// Bottom menu font size
  static const double bottomMenuFontSize = 12.0;

  /// Bottom menu font bold
  static const bool bottomMenuFontBold = bool.fromEnvironment(
    'BOTTOMMENU_FONT_BOLD',
    defaultValue: ${BOTTOMMENU_FONT_BOLD:-false},
  );

  /// Bottom menu font italic
  static const bool bottomMenuFontItalic = bool.fromEnvironment(
    'BOTTOMMENU_FONT_ITALIC',
    defaultValue: ${BOTTOMMENU_FONT_ITALIC:-false},
  );

  /// Bottom menu active tab color
  static const String bottomMenuActiveTabColor = String.fromEnvironment(
    'BOTTOMMENU_ACTIVE_TAB_COLOR',
    defaultValue: '${BOTTOMMENU_ACTIVE_TAB_COLOR:-#007AFF}',
  );

  /// Bottom menu icon position
  static const String bottomMenuIconPosition = String.fromEnvironment(
    'BOTTOMMENU_ICON_POSITION',
    defaultValue: '${BOTTOMMENU_ICON_POSITION:-top}',
  );

  // ===== FIREBASE CONFIGURATION =====
  
  /// Firebase config for Android
  static const String firebaseConfigAndroid = String.fromEnvironment(
    'FIREBASE_CONFIG_ANDROID',
    defaultValue: '${FIREBASE_CONFIG_ANDROID:-}',
  );

  /// Firebase config for iOS
  static const String firebaseConfigIos = String.fromEnvironment(
    'FIREBASE_CONFIG_IOS',
    defaultValue: '${FIREBASE_CONFIG_IOS:-}',
  );

  // ===== BUILD INFORMATION =====
  
  /// Build ID from Codemagic
  static const String buildId = String.fromEnvironment(
    'CM_BUILD_ID',
    defaultValue: '${CM_BUILD_ID:-unknown}',
  );

  /// Branch name
  static const String branch = String.fromEnvironment(
    'BRANCH',
    defaultValue: '${BRANCH:-main}',
  );

  /// Commit hash
  static const String commitHash = String.fromEnvironment(
    'CM_COMMIT',
    defaultValue: '${CM_COMMIT:-unknown}',
  );

  // ===== UTILITY METHODS =====
  
  /// Check if running in production build
  static bool get isProduction => !kDebugMode;
  
  /// Check if running in development build
  static bool get isDevelopment => kDebugMode;
  
  /// Check if running in test environment
  static bool get isTest =>
      const bool.fromEnvironment('dart.vm.product') == false;

  /// Get current platform-specific configuration
  static Map<String, dynamic> get platformConfig {
    return {
      'platform': 'ios',
      'firebaseConfig': firebaseConfigIos,
      'bundleId': bundleId,
      'teamId': '${APPLE_TEAM_ID:-}',
      'deploymentTarget': '${IOS_DEPLOYMENT_TARGET:-13.0}',
    };
  }

  /// Get all configuration as a map for debugging
  static Map<String, dynamic> get allConfig => {
        'appName': appName,
        'versionName': versionName,
        'versionCode': versionCode,
        'packageName': packageName,
        'bundleId': bundleId,
        'workflowId': workflowId,
        'pushNotify': pushNotify,
        'isChatbot': isChatbot,
        'isDomainUrl': isDomainUrl,
        'isSplash': isSplash,
        'isBottomMenu': isBottomMenu,
        'isGoogleAuth': isGoogleAuth,
        'isAppleAuth': isAppleAuth,
        'buildId': buildId,
        'branch': branch,
        'commitHash': commitHash,
        'platform': platformConfig,
      };

  /// Validate critical configuration
  static List<String> get validationErrors {
    final errors = <String>[];

    if (appName.isEmpty) errors.add('APP_NAME is required');
    if (versionName.isEmpty) errors.add('VERSION_NAME is required');
    if (versionCode <= 0) errors.add('VERSION_CODE must be positive');
    if (bundleId.isEmpty) errors.add('BUNDLE_ID is required');

    return errors;
  }

  /// Check if configuration is valid
  static bool get isValid => validationErrors.isEmpty;

  /// Get configuration summary for logging
  static String get configSummary => '''
🚀 iOS Workflow Environment Configuration:
   App: $appName ($bundleId)
   Version: $versionName ($versionCode)
   Workflow: $workflowId
   Platform: ${platformConfig['platform']}
   Push Notifications: $pushNotify
   Firebase: ${firebaseConfigIos.isNotEmpty ? 'Enabled' : 'Disabled'}
   Valid: $isValid
''';
}

/// 🚀 Build-time environment configuration
/// This ensures all variables are available at compile time
class BuildConfig {
  BuildConfig._();

  /// Current workflow ID
  static const String workflowId = String.fromEnvironment(
    'WORKFLOW_ID',
    defaultValue: '${WORKFLOW_ID:-ios-workflow}',
  );

  /// Build ID from Codemagic
  static const String buildId = String.fromEnvironment(
    'CM_BUILD_ID',
    defaultValue: '${CM_BUILD_ID:-unknown}',
  );

  /// Branch name
  static const String branch = String.fromEnvironment(
    'BRANCH',
    defaultValue: '${BRANCH:-main}',
  );

  /// Commit hash
  static const String commitHash = String.fromEnvironment(
    'CM_COMMIT',
    defaultValue: '${CM_COMMIT:-unknown}',
  );

  /// Get build information
  static Map<String, dynamic> get buildInfo => {
        'workflowId': workflowId,
        'buildId': buildId,
        'branch': branch,
        'commitHash': commitHash,
        'platform': 'ios',
        'generatedAt': '$(date)',
      };
}
EOF

    # Replace environment variable placeholders
    log_info "🔄 Processing environment variables..."
    
    # Use sed to replace variables (more reliable than envsubst)
    sed -i.tmp \
        -e "s/\${WORKFLOW_ID:-ios-workflow}/${WORKFLOW_ID:-ios-workflow}/g" \
        -e "s/\${PROJECT_ID:-unknown}/${PROJECT_ID:-unknown}/g" \
        -e "s/\${APP_NAME:-QuikApp}/${APP_NAME:-QuikApp}/g" \
        -e "s/\${VERSION_NAME:-1.0.0}/${VERSION_NAME:-1.0.0}/g" \
        -e "s/\${VERSION_CODE:-1}/${VERSION_CODE:-1}/g" \
        -e "s/\${BUNDLE_ID:-com.example.app}/${BUNDLE_ID:-com.example.app}/g" \
        -e "s/\${USER_NAME:-User}/${USER_NAME:-User}/g" \
        -e "s/\${APP_ID:-unknown}/${APP_ID:-unknown}/g" \
        -e "s/\${ORG_NAME:-Organization}/${ORG_NAME:-Organization}/g" \
        -e "s/\${WEB_URL:-https://example.com}/${WEB_URL:-https://example.com}/g" \
        -e "s/\${PKG_NAME:-com.example.app}/${PKG_NAME:-com.example.app}/g" \
        -e "s/\${EMAIL_ID:-user@example.com}/${EMAIL_ID:-user@example.com}/g" \
        -e "s/\${PUSH_NOTIFY:-false}/${PUSH_NOTIFY:-false}/g" \
        -e "s/\${IS_CHATBOT:-false}/${IS_CHATBOT:-false}/g" \
        -e "s/\${IS_DOMAIN_URL:-false}/${IS_DOMAIN_URL:-false}/g" \
        -e "s/\${IS_SPLASH:-false}/${IS_SPLASH:-false}/g" \
        -e "s/\${IS_PULLDOWN:-false}/${IS_PULLDOWN:-false}/g" \
        -e "s/\${IS_BOTTOMMENU:-false}/${IS_BOTTOMMENU:-false}/g" \
        -e "s/\${IS_LOAD_IND:-false}/${IS_LOAD_IND:-false}/g" \
        -e "s/\${IS_GOOGLE_AUTH:-false}/${IS_GOOGLE_AUTH:-false}/g" \
        -e "s/\${IS_APPLE_AUTH:-false}/${IS_APPLE_AUTH:-false}/g" \
        -e "s/\${IS_CAMERA:-false}/${IS_CAMERA:-false}/g" \
        -e "s/\${IS_LOCATION:-false}/${IS_LOCATION:-false}/g" \
        -e "s/\${IS_MIC:-false}/${IS_MIC:-false}/g" \
        -e "s/\${IS_NOTIFICATION:-false}/${IS_NOTIFICATION:-false}/g" \
        -e "s/\${IS_CONTACT:-false}/${IS_CONTACT:-false}/g" \
        -e "s/\${IS_BIOMETRIC:-false}/${IS_BIOMETRIC:-false}/g" \
        -e "s/\${IS_CALENDAR:-false}/${IS_CALENDAR:-false}/g" \
        -e "s/\${IS_STORAGE:-false}/${IS_STORAGE:-false}/g" \
        -e "s/\${LOGO_URL:-}/${LOGO_URL:-}/g" \
        -e "s/\${SPLASH_URL:-}/${SPLASH_URL:-}/g" \
        -e "s/\${SPLASH_BG_URL:-}/${SPLASH_BG_URL:-}/g" \
        -e "s/\${SPLASH_BG_COLOR:-#FFFFFF}/${SPLASH_BG_COLOR:-#FFFFFF}/g" \
        -e "s/\${SPLASH_TAGLINE:-Welcome}/${SPLASH_TAGLINE:-Welcome}/g" \
        -e "s/\${SPLASH_TAGLINE_COLOR:-#000000}/${SPLASH_TAGLINE_COLOR:-#000000}/g" \
        -e "s/\${SPLASH_TAGLINE_FONT:-Roboto}/${SPLASH_TAGLINE_FONT:-Roboto}/g" \
        -e "s/\${SPLASH_TAGLINE_SIZE:-24}/${SPLASH_TAGLINE_SIZE:-24}/g" \
        -e "s/\${SPLASH_TAGLINE_BOLD:-false}/${SPLASH_TAGLINE_BOLD:-false}/g" \
        -e "s/\${SPLASH_TAGLINE_ITALIC:-false}/${SPLASH_TAGLINE_ITALIC:-false}/g" \
        -e "s/\${SPLASH_ANIMATION:-fade}/${SPLASH_ANIMATION:-fade}/g" \
        -e "s/\${SPLASH_DURATION:-3000}/${SPLASH_DURATION:-3000}/g" \
        -e "s/\${BOTTOMMENU_ITEMS:-\[\]}/${BOTTOMMENU_ITEMS:-\[\]}/g" \
        -e "s/\${BOTTOMMENU_BG_COLOR:-#FFFFFF}/${BOTTOMMENU_BG_COLOR:-#FFFFFF}/g" \
        -e "s/\${BOTTOMMENU_ICON_COLOR:-#666666}/${BOTTOMMENU_ICON_COLOR:-#666666}/g" \
        -e "s/\${BOTTOMMENU_TEXT_COLOR:-#333333}/${BOTTOMMENU_TEXT_COLOR:-#333333}/g" \
        -e "s/\${BOTTOMMENU_FONT:-Roboto}/${BOTTOMMENU_FONT:-Roboto}/g" \
        -e "s/\${BOTTOMMENU_FONT_BOLD:-false}/${BOTTOMMENU_FONT_BOLD:-false}/g" \
        -e "s/\${BOTTOMMENU_FONT_ITALIC:-false}/${BOTTOMMENU_FONT_ITALIC:-false}/g" \
        -e "s/\${BOTTOMMENU_ACTIVE_TAB_COLOR:-#007AFF}/${BOTTOMMENU_ACTIVE_TAB_COLOR:-#007AFF}/g" \
        -e "s/\${BOTTOMMENU_ICON_POSITION:-top}/${BOTTOMMENU_ICON_POSITION:-top}/g" \
        -e "s/\${FIREBASE_CONFIG_ANDROID:-}/${FIREBASE_CONFIG_ANDROID:-}/g" \
        -e "s/\${FIREBASE_CONFIG_IOS:-}/${FIREBASE_CONFIG_IOS:-}/g" \
        -e "s/\${CM_BUILD_ID:-unknown}/${CM_BUILD_ID:-unknown}/g" \
        -e "s/\${BRANCH:-main}/${BRANCH:-main}/g" \
        -e "s/\${CM_COMMIT:-unknown}/${CM_COMMIT:-unknown}/g" \
        -e "s/\${APPLE_TEAM_ID:-}/${APPLE_TEAM_ID:-}/g" \
        -e "s/\${IOS_DEPLOYMENT_TARGET:-13.0}/${IOS_DEPLOYMENT_TARGET:-13.0}/g" \
        -e "s/\$(date)/$(date)/g" \
        "$DART_ENV_TEMP"

    # Remove temporary file
    rm -f "${DART_ENV_TEMP}.tmp"

    # Move to final location
    mv "$DART_ENV_TEMP" "$DART_ENV_FILE"
    
    log_success "✅ Dart environment configuration generated: $DART_ENV_FILE"
}

# Validate generated Dart file
validate_dart_file() {
    log_info "🔍 Validating generated Dart file..."
    
    if [[ ! -f "$DART_ENV_FILE" ]]; then
        log_error "❌ Generated Dart file not found: $DART_ENV_FILE"
        return 1
    fi
    
    # Check if file contains expected content
    if grep -q "class Environment" "$DART_ENV_FILE"; then
        log_success "✅ Dart file contains Environment class"
    else
        log_error "❌ Dart file missing Environment class"
        return 1
    fi
    
    # Check if file contains workflow ID
    if grep -q "workflowId.*${WORKFLOW_ID:-ios-workflow}" "$DART_ENV_FILE"; then
        log_success "✅ Dart file contains correct workflow ID"
    else
        log_warning "⚠️ Dart file may not contain correct workflow ID"
    fi
    
    # Validate Dart syntax
    if command -v dart &> /dev/null; then
        if dart analyze "$DART_ENV_FILE" >/dev/null 2>&1; then
            log_success "✅ Dart file syntax is valid"
        else
            log_warning "⚠️ Dart file may have syntax issues"
            dart analyze "$DART_ENV_FILE" 2>&1 | head -10
        fi
    else
        log_warning "⚠️ Dart not available for syntax validation"
    fi
    
    return 0
}

# Main function
main() {
    log_info "🚀 Starting Dart environment configuration generation for iOS workflow..."
    
    # Validate environment variables
    validate_required_vars
    
    # Generate Dart environment configuration
    generate_dart_environment
    
    # Validate generated file
    if validate_dart_file; then
        log_success "🎉 Dart environment configuration generated successfully!"
        log_info "📱 Your iOS app can now access all workflow variables through the Environment class"
        
        # Show summary
        log_info "📊 Environment Configuration Summary:"
        log_info "   - App Name: ${APP_NAME:-Not set}"
        log_info "   - Bundle ID: ${BUNDLE_ID:-Not set}"
        log_info "   - Version: ${VERSION_NAME:-Not set} (${VERSION_CODE:-Not set})"
        log_info "   - Workflow: ${WORKFLOW_ID:-ios-workflow}"
        log_info "   - Push Notifications: ${PUSH_NOTIFY:-false}"
        log_info "   - Firebase iOS: ${FIREBASE_CONFIG_IOS:+Enabled}"
        log_info "   - Generated File: $DART_ENV_FILE"
        
    else
        log_error "❌ Failed to generate valid Dart environment configuration"
        exit 1
    fi
}

# Run main function
main "$@"
