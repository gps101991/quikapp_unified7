# üöÄ QuikApp Unified Codemagic Workflows Configuration
# Combines iOS workflow from quikapp07-ios-working-folder and Android publish workflow from quikapptest06-android working folder

workflows:
  # üçé iOS Workflow - From quikapp07-ios-working-folder
  ios-workflow:
    name: Build iOS App using Dynamic Config
    max_build_duration: 120
    instance_type: mac_mini_m2
    environment:
      vars:
        # üîß iOS Build Optimization Variables
        XCODE_PARALLEL_JOBS: "8"
        XCODE_FAST_BUILD: "true"
        XCODE_SKIP_SIGNING: "false"
        XCODE_OPTIMIZATION: "true"
        XCODE_CLEAN_BUILD: "true"
        XCODE_PARALLEL_BUILD: "true"
        COCOAPODS_FAST_INSTALL: "true"
        COCOAPODS_PARALLEL_INSTALL: "true"
        FLUTTER_VERBOSE: "false"
        FLUTTER_ANALYZE: "true"
        FLUTTER_TEST: "false"
        FLUTTER_BUILD_NUMBER: "auto"
        ASSET_OPTIMIZATION: "true"
        IMAGE_COMPRESSION: "true"
        PARALLEL_DOWNLOADS: "true"
        DOWNLOAD_TIMEOUT: "300"
        DOWNLOAD_RETRIES: "3"
        FAIL_ON_WARNINGS: "false"
        CONTINUE_ON_ERROR: "true"
        RETRY_ON_FAILURE: "true"
        MAX_RETRIES: "2"
        ENABLE_BUILD_RECOVERY: "true"
        CLEAN_ON_FAILURE: "true"
        CACHE_ON_SUCCESS: "true"
        
        # üçé iOS-Specific Build Variables
        IOS_DEPLOYMENT_TARGET: "13.0"
        IOS_ARCHITECTURES: "arm64"
        IOS_SIMULATOR_ARCHITECTURES: "x86_64,arm64"
        IOS_BITCODE_ENABLED: "false"
        IOS_SWIFT_OPTIMIZATION: "true"
        IOS_DEBUG_INFORMATION_FORMAT: "dwarf-with-dsym"
        IOS_ENABLE_BITCODE: "false"
        IOS_ENABLE_TESTABILITY: "false"
        IOS_STRIP_SWIFT_SYMBOLS: "true"
        IOS_UPLOAD_SYMBOLS: "true"
        IOS_COMPILE_BITCODE: "false"
        
        # üìß Email Notifications
        ENABLE_EMAIL_NOTIFICATIONS: $ENABLE_EMAIL_NOTIFICATIONS
        EMAIL_SMTP_SERVER: $EMAIL_SMTP_SERVER
        EMAIL_SMTP_PORT: $EMAIL_SMTP_PORT
        EMAIL_SMTP_USER: $EMAIL_SMTP_USER
        EMAIL_SMTP_PASS: $EMAIL_SMTP_PASS

        # Core App Configuration
        WORKFLOW_ID: $WORKFLOW_ID
        PROJECT_ID: $PROJECT_ID
        APP_NAME: $APP_NAME
        VERSION_NAME: $VERSION_NAME
        VERSION_CODE: $VERSION_CODE
        EMAIL_ID: $EMAIL_ID
        BUNDLE_ID: $BUNDLE_ID
        APPLE_TEAM_ID: $APPLE_TEAM_ID
        PROFILE_TYPE: $PROFILE_TYPE
        PROFILE_URL: $PROFILE_URL
        IS_TESTFLIGHT: $IS_TESTFLIGHT
        APP_STORE_CONNECT_KEY_IDENTIFIER: $APP_STORE_CONNECT_KEY_IDENTIFIER
        APP_STORE_CONNECT_ISSUER_ID: $APP_STORE_CONNECT_ISSUER_ID
        APP_STORE_CONNECT_API_KEY_URL: $APP_STORE_CONNECT_API_KEY_URL
        
        # Branding & UI
        LOGO_URL: $LOGO_URL
        SPLASH_URL: $SPLASH_URL
        SPLASH_BG_URL: $SPLASH_BG_URL
        SPLASH_BG_COLOR: $SPLASH_BG_COLOR
        SPLASH_TAGLINE: $SPLASH_TAGLINE
        SPLASH_TAGLINE_COLOR: $SPLASH_TAGLINE_COLOR
        SPLASH_TAGLINE_FONT: $SPLASH_TAGLINE_FONT
        SPLASH_TAGLINE_SIZE: $SPLASH_TAGLINE_SIZE
        SPLASH_TAGLINE_BOLD: $SPLASH_TAGLINE_BOLD
        SPLASH_TAGLINE_ITALIC: $SPLASH_TAGLINE_ITALIC
        SPLASH_ANIMATION: $SPLASH_ANIMATION
        SPLASH_DURATION: $SPLASH_DURATION
        
        # User & Organization
        USER_NAME: $USER_NAME
        APP_ID: $APP_ID
        ORG_NAME: $ORG_NAME
        WEB_URL: $WEB_URL
        PKG_NAME: $PKG_NAME
        
        # Feature Flags
        PUSH_NOTIFY: $PUSH_NOTIFY
        IS_CHATBOT: $IS_CHATBOT
        IS_DOMAIN_URL: $IS_DOMAIN_URL
        IS_SPLASH: $IS_SPLASH
        IS_PULLDOWN: $IS_PULLDOWN
        IS_BOTTOMMENU: $IS_BOTTOMMENU
        IS_LOAD_IND: $IS_LOAD_IND
        
        # Permissions
        IS_CAMERA: $IS_CAMERA
        IS_LOCATION: $IS_LOCATION
        IS_MIC: $IS_MIC
        IS_NOTIFICATION: $IS_NOTIFICATION
        IS_CONTACT: $IS_CONTACT
        IS_BIOMETRIC: $IS_BIOMETRIC
        IS_CALENDAR: $IS_CALENDAR
        IS_STORAGE: $IS_STORAGE
        
        # Bottom Menu Configuration
        BOTTOMMENU_ITEMS: $BOTTOMMENU_ITEMS
        BOTTOMMENU_BG_COLOR: $BOTTOMMENU_BG_COLOR
        BOTTOMMENU_ICON_COLOR: $BOTTOMMENU_ICON_COLOR
        BOTTOMMENU_TEXT_COLOR: $BOTTOMMENU_TEXT_COLOR
        BOTTOMMENU_FONT: $BOTTOMMENU_FONT
        BOTTOMMENU_FONT_SIZE: $BOTTOMMENU_FONT_SIZE
        BOTTOMMENU_FONT_BOLD: $BOTTOMMENU_FONT_BOLD
        BOTTOMMENU_FONT_ITALIC: $BOTTOMMENU_FONT_ITALIC
        BOTTOMMENU_ACTIVE_TAB_COLOR: $BOTTOMMENU_ACTIVE_TAB_COLOR
        BOTTOMMENU_ICON_POSITION: $BOTTOMMENU_ICON_POSITION
        
        # Firebase & APNS
        FIREBASE_CONFIG_ANDROID: "${FIREBASE_CONFIG_ANDROID:-}"
        FIREBASE_CONFIG_IOS: "${FIREBASE_CONFIG_IOS:-}"
        APNS_KEY_ID: $APNS_KEY_ID
        APNS_AUTH_KEY_URL: $APNS_AUTH_KEY_URL
        
        # Certificate Configuration
        CERT_PASSWORD: "${CERT_PASSWORD:-}"
        CERT_P12_URL: "${CERT_P12_URL:-}"
        CERT_CER_URL: "${CERT_CER_URL:-}"
        CERT_KEY_URL: "${CERT_KEY_URL:-}"
        

        
        # üîê OAuth Authentication
        IS_GOOGLE_AUTH: $IS_GOOGLE_AUTH
        IS_APPLE_AUTH: $IS_APPLE_AUTH
      xcode: 16.0
      cocoapods: 1.16.2
      flutter: 3.32.2
      java: 17

    scripts:
      - name: üöÄ iOS Workflow
        script: |
            # üè∑Ô∏è Step 1: Project Name Change (CRITICAL - Must be first!)
            echo "üè∑Ô∏è Step 1: Project Name Change for Dynamic Configuration..."
            echo "App Name: $APP_NAME"
            
            # 2Ô∏è‚É£ Sanitize: lowercase, remove special characters, replace spaces with underscores
            SANITIZED_NAME=$(echo "$APP_NAME" | tr '[:upper:]' '[:lower:]' | tr -cd 'a-z0-9 ' | tr ' ' '_')
            
            # 3Ô∏è‚É£ Extract old name from pubspec.yaml
            OLD_NAME_LINE=$(grep '^name: ' pubspec.yaml)
            OLD_NAME=$(echo "$OLD_NAME_LINE" | cut -d ' ' -f2)
            
            echo "üîÅ Renaming project from '$OLD_NAME' to '$SANITIZED_NAME'..."
            
            # Update pubspec.yaml
            sed -i '' "s/^name: .*/name: $SANITIZED_NAME/" pubspec.yaml
            
            # Update Dart imports
            echo "üîÑ Updating Dart package imports..."
            grep -rl "package:$OLD_NAME" lib/ | xargs sed -i '' "s/package:$OLD_NAME/package:$SANITIZED_NAME/g"
            
            # iOS: Update CFBundleName in Info.plist
            echo "üõ†Ô∏è Updating iOS CFBundleName..."
            plutil -replace CFBundleName -string "$APP_NAME" ios/Runner/Info.plist
            
            # Clean and get packages
            flutter clean
            flutter pub get
            
            echo "‚úÖ Project renamed to '$SANITIZED_NAME'"
            echo "üöÄ iOS CFBundleName set to '$APP_NAME'"
            
            # Enhanced logging functions
            log_info() { echo "‚ÑπÔ∏è $1" >&2; }
            log_success() { echo "‚úÖ $1" >&2; }
            log_warning() { echo "‚ö†Ô∏è $1" >&2; }
            log_error() { echo "‚ùå $1" >&2; }
            
            log_info "üîß Making scripts executable..."
            chmod +x lib/scripts/ios/*.sh 2>/dev/null || log_warning "Some scripts may not be executable"
            chmod +x lib/scripts/ios-workflow/*.sh 2>/dev/null || log_warning "Some ios-workflow scripts may not be executable"
            chmod +x lib/scripts/utils/*.sh 2>/dev/null || log_warning "Some utils scripts may not be executable"
            
            log_info "üé® Setting up logo for flutter_launcher_icons..."
            if [[ -f "lib/scripts/ios-workflow/setup_logo_for_icons.sh" ]]; then
                chmod +x lib/scripts/ios-workflow/setup_logo_for_icons.sh
                if ./lib/scripts/ios-workflow/setup_logo_for_icons.sh; then
                    log_info "‚úÖ Logo setup completed successfully"
                    
                    # Ensure dependencies are up to date
                    log_info "üì¶ Running flutter pub get..."
                    if flutter pub get; then
                        log_info "‚úÖ Dependencies updated successfully"
                        
                        log_info "üé® Generating iOS app icons using flutter_launcher_icons..."
                        if flutter pub run flutter_launcher_icons; then
                            log_info "‚úÖ iOS app icons generated successfully using flutter_launcher_icons"
                            
                            # Run bulletproof Contents.json fix first
                            log_info "üîß Step 1: Running bulletproof Contents.json fix..."
                            if [[ -f "lib/scripts/ios-workflow/fix_contents_json_bulletproof.sh" ]]; then
                                chmod +x lib/scripts/ios-workflow/fix_contents_json_bulletproof.sh
                                if ./lib/scripts/ios-workflow/fix_contents_json_bulletproof.sh; then
                                    log_info "‚úÖ Bulletproof Contents.json fix completed successfully"
                                else
                                    log_warning "‚ö†Ô∏è Bulletproof Contents.json fix failed, trying fallback..."
                                fi
                            fi
                            
                            # Run comprehensive icon fix to ensure App Store compliance
                            log_info "üîß Step 2: Running comprehensive iOS icon fix for App Store compliance..."
                            if [[ -f "lib/scripts/ios-workflow/fix_ios_icons_comprehensive.sh" ]]; then
                                chmod +x lib/scripts/ios-workflow/fix_ios_icons_comprehensive.sh
                                if ./lib/scripts/ios-workflow/fix_ios_icons_comprehensive.sh; then
                                    log_info "‚úÖ Comprehensive iOS icon fix completed successfully"
                                    log_info "‚úÖ App Store Connect validation should now pass"
                                else
                                    log_warning "‚ö†Ô∏è Comprehensive iOS icon fix failed, but continuing with build..."
                                fi
                            else
                                log_warning "‚ö†Ô∏è Comprehensive iOS icon fix script not found, using fallback method..."
                                # Use a simpler approach - just run flutter_launcher_icons again with proper config
                                log_info "üîß Running flutter_launcher_icons with enhanced iOS configuration..."
                                
                                # Create enhanced flutter_launcher_icons.yaml
                                echo "flutter_launcher_icons:" > flutter_launcher_icons_enhanced.yaml
                                echo "  android: \"launcher_icon\"" >> flutter_launcher_icons_enhanced.yaml
                                echo "  ios: true" >> flutter_launcher_icons_enhanced.yaml
                                echo "  image_path: \"assets/images/logo.png\"" >> flutter_launcher_icons_enhanced.yaml
                                echo "  remove_alpha_ios: true" >> flutter_launcher_icons_enhanced.yaml
                                echo "  background_color_ios: \"#FFFFFF\"" >> flutter_launcher_icons_enhanced.yaml
                                echo "  min_sdk_android: 21" >> flutter_launcher_icons_enhanced.yaml
                                
                                if flutter pub run flutter_launcher_icons -f flutter_launcher_icons_enhanced.yaml; then
                                    log_info "‚úÖ Enhanced flutter_launcher_icons completed successfully"
                                    log_info "‚úÖ App Store Connect validation should now pass"
                                else
                                    log_warning "‚ö†Ô∏è Enhanced flutter_launcher_icons failed, but continuing with build..."
                                fi
                                
                                # Clean up temporary file
                                rm -f "flutter_launcher_icons_enhanced.yaml"
                            fi
                            
                            # Run comprehensive notification fix
                            log_info "üîß Step 3: Running comprehensive iOS notification fix..."
                            if [[ -f "lib/scripts/ios-workflow/fix_notifications_comprehensive.sh" ]]; then
                                chmod +x lib/scripts/ios-workflow/fix_notifications_comprehensive.sh
                                if ./lib/scripts/ios-workflow/fix_notifications_comprehensive.sh; then
                                    log_info "‚úÖ Comprehensive iOS notification fix completed successfully"
                                    log_info "‚úÖ Push notifications should now work in all app states"
                                else
                                    log_warning "‚ö†Ô∏è Comprehensive iOS notification fix failed, but continuing with build..."
                                fi
                            else
                                log_warning "‚ö†Ô∏è Comprehensive iOS notification fix script not found"
                            fi
                        else
                            log_warning "‚ö†Ô∏è flutter_launcher_icons failed, trying comprehensive fix..."
                            if [[ -f "lib/scripts/ios-workflow/fix_ios_icons_comprehensive.sh" ]]; then
                                chmod +x lib/scripts/ios-workflow/fix_ios_icons_comprehensive.sh
                                if ./lib/scripts/ios-workflow/fix_ios_icons_comprehensive.sh; then
                                    log_info "‚úÖ Comprehensive iOS icon fix completed successfully as fallback"
                                    log_info "‚úÖ App Store Connect validation should now pass"
                                else
                                    log_warning "‚ö†Ô∏è Comprehensive iOS icon fix failed, continuing with build..."
                                fi
                            else
                                log_warning "‚ö†Ô∏è No iOS icon fix scripts found, continuing with build..."
                            fi
                        fi
                    else
                        log_warning "‚ö†Ô∏è flutter pub get failed, continuing with build..."
                    fi
                else
                    log_error "‚ùå Logo setup failed, continuing with build..."
                fi
            else
                log_warning "‚ö†Ô∏è Logo setup script not found, continuing with build..."
            fi
            
            log_info "üöÄ Starting main iOS build process..."
            bash lib/scripts/ios/ios_build.sh

    artifacts:
      - build/export/*.ipa
      - output/ios/*.ipa
      - build/Runner.xcarchive
      - flutter_drive.log
      - output/ios/
      - build/ios/archive/
      - ios/ExportOptions.plist
      - output/ios/ARTIFACTS_SUMMARY.txt
      - flutter_build.log
      - xcodebuild_archive.log

  # ü§ñ Android Publish Workflow - From quikapptest06-android working folder
  android-publish:
    name: Android Publish Build
    max_build_duration: 120
    instance_type: mac_mini_m2
    environment:
      flutter: 3.32.2
      java: 17
      vars:
        # üîß Build Stability Variables
        GRADLE_OPTS: "-Xmx12G -XX:MaxMetaspaceSize=3G -XX:ReservedCodeCacheSize=2048M -XX:+UseG1GC -XX:MaxGCPauseMillis=50 -XX:+UseStringDeduplication -XX:+OptimizeStringConcat -XX:+TieredCompilation -XX:TieredStopAtLevel=1"
        XCODE_PARALLEL_JOBS: "8"
        GRADLE_DAEMON: "true"
        GRADLE_PARALLEL: "true"
        GRADLE_CACHING: "true"
        GRADLE_OFFLINE: "false"
        GRADLE_CONFIGURE_ON_DEMAND: "true"
        GRADLE_BUILD_CACHE: "true"
        GRADLE_WORKER_MAX_HEAP_SIZE: "4G"
        GRADLE_MAX_WORKERS: "4"
        GRADLE_ORG_GRADLE_JVMARGS: "-Xmx4G -XX:MaxMetaspaceSize=1G -XX:+UseG1GC -XX:MaxGCPauseMillis=50"
        FLUTTER_PUB_CACHE: "true"
        FLUTTER_VERBOSE: "false"
        FLUTTER_ANALYZE: "true"
        FLUTTER_TEST: "false"
        FLUTTER_BUILD_NUMBER: "auto"
        ASSET_OPTIMIZATION: "true"
        IMAGE_COMPRESSION: "true"
        PARALLEL_DOWNLOADS: "true"
        DOWNLOAD_TIMEOUT: "300"
        DOWNLOAD_RETRIES: "3"
        FAIL_ON_WARNINGS: "false"
        CONTINUE_ON_ERROR: "true"
        RETRY_ON_FAILURE: "true"
        MAX_RETRIES: "2"
        ENABLE_BUILD_RECOVERY: "true"
        CLEAN_ON_FAILURE: "true"
        CACHE_ON_SUCCESS: "true"

        # üìß Email Notifications
        ENABLE_EMAIL_NOTIFICATIONS: $ENABLE_EMAIL_NOTIFICATIONS
        EMAIL_SMTP_SERVER: $EMAIL_SMTP_SERVER
        EMAIL_SMTP_PORT: $EMAIL_SMTP_PORT
        EMAIL_SMTP_USER: $EMAIL_SMTP_USER
        EMAIL_SMTP_PASS: $EMAIL_SMTP_PASS

        # üîê OAuth Authentication
        IS_GOOGLE_AUTH: $IS_GOOGLE_AUTH
        IS_APPLE_AUTH: $IS_APPLE_AUTH

        # üì± App Configuration
        WORKFLOW_ID: "android-publish"
        PROJECT_ID: $PROJECT_ID
        APP_ID: $APP_ID
        BRANCH: $BRANCH
        VERSION_NAME: $VERSION_NAME
        VERSION_CODE: $VERSION_CODE
        APP_NAME: $APP_NAME
        ORG_NAME: $ORG_NAME
        WEB_URL: $WEB_URL
        EMAIL_ID: $EMAIL_ID
        USER_NAME: $USER_NAME
        PKG_NAME: $PKG_NAME

        # üîß Feature Flags
        PUSH_NOTIFY: $PUSH_NOTIFY
        IS_DOMAIN_URL: $IS_DOMAIN_URL
        IS_CHATBOT: $IS_CHATBOT
        IS_SPLASH: $IS_SPLASH
        IS_PULLDOWN: $IS_PULLDOWN
        IS_BOTTOMMENU: $IS_BOTTOMMENU
        IS_LOAD_IND: $IS_LOAD_IND

        # üîê Permissions
        IS_CAMERA: $IS_CAMERA
        IS_LOCATION: $IS_LOCATION
        IS_MIC: $IS_MIC
        IS_NOTIFICATION: $IS_NOTIFICATION
        IS_CONTACT: $IS_CONTACT
        IS_BIOMETRIC: $IS_BIOMETRIC
        IS_CALENDAR: $IS_CALENDAR
        IS_STORAGE: $IS_STORAGE

        # üé® UI Configuration
        LOGO_URL: $LOGO_URL
        SPLASH_URL: $SPLASH_URL
        SPLASH_BG_URL: $SPLASH_BG_URL
        SPLASH_BG_COLOR: $SPLASH_BG_COLOR
        SPLASH_TAGLINE: $SPLASH_TAGLINE
        SPLASH_TAGLINE_COLOR: $SPLASH_TAGLINE_COLOR
        SPLASH_TAGLINE_FONT: $SPLASH_TAGLINE_FONT
        SPLASH_TAGLINE_SIZE: $SPLASH_TAGLINE_SIZE
        SPLASH_TAGLINE_BOLD: $SPLASH_TAGLINE_BOLD
        SPLASH_TAGLINE_ITALIC: $SPLASH_TAGLINE_ITALIC
        SPLASH_ANIMATION: $SPLASH_ANIMATION
        SPLASH_DURATION: $SPLASH_DURATION
        BOTTOMMENU_ITEMS: $BOTTOMMENU_ITEMS
        BOTTOMMENU_BG_COLOR: $BOTTOMMENU_BG_COLOR
        BOTTOMMENU_ICON_COLOR: $BOTTOMMENU_ICON_COLOR
        BOTTOMMENU_TEXT_COLOR: $BOTTOMMENU_TEXT_COLOR
        BOTTOMMENU_FONT: $BOTTOMMENU_FONT
        BOTTOMMENU_FONT_SIZE: $BOTTOMMENU_FONT_SIZE
        BOTTOMMENU_FONT_BOLD: $BOTTOMMENU_FONT_BOLD
        BOTTOMMENU_FONT_ITALIC: $BOTTOMMENU_FONT_ITALIC
        BOTTOMMENU_ACTIVE_TAB_COLOR: $BOTTOMMENU_ACTIVE_TAB_COLOR
        BOTTOMMENU_ICON_POSITION: $BOTTOMMENU_ICON_POSITION

        # üî• Firebase Configuration
        FIREBASE_CONFIG_ANDROID: $FIREBASE_CONFIG_ANDROID
        FIREBASE_CONFIG_IOS: $FIREBASE_CONFIG_IOS

        # üîê Keystore Configuration
        KEY_STORE_URL: $KEY_STORE_URL
        CM_KEYSTORE_PASSWORD: $CM_KEYSTORE_PASSWORD
        CM_KEY_ALIAS: $CM_KEY_ALIAS
        CM_KEY_PASSWORD: $CM_KEY_PASSWORD

        # üçé iOS Signing (for combined workflows)
        BUNDLE_ID: $BUNDLE_ID
        APPLE_TEAM_ID: $APPLE_TEAM_ID
        CERT_TYPE: $CERT_TYPE
        CERT_P12_URL: $CERT_P12_URL
        CERT_PASSWORD: $CERT_PASSWORD
        CERT_KEY_URL: $CERT_KEY_URL
        CERT_CER_URL: $CERT_CER_URL
        PROFILE_URL: $PROFILE_URL
        PROFILE_TYPE: $PROFILE_TYPE
        APNS_KEY_ID: $APNS_KEY_ID
        APNS_AUTH_KEY_URL: $APNS_AUTH_KEY_URL
        APP_STORE_CONNECT_KEY_IDENTIFIER: $APP_STORE_CONNECT_KEY_IDENTIFIER
        APP_STORE_CONNECT_ISSUER_ID: $APP_STORE_CONNECT_ISSUER_ID
        APP_STORE_CONNECT_API_KEY_URL: $APP_STORE_CONNECT_API_KEY_URL
        IS_TESTFLIGHT: $IS_TESTFLIGHT
        UPLOAD_TO_APP_STORE: $UPLOAD_TO_APP_STORE

    scripts:
      - name: Pre-build Setup
        script: |
          echo "üöÄ Starting Android Publish Build with enhanced success rate optimizations..."
          echo "üìä Build Environment:"
          echo "  - Flutter: $(flutter --version | head -1)"
          echo "  - Java: $(java -version 2>&1 | head -1)"
          echo "  - Gradle: $(./android/gradlew --version | grep "Gradle" | head -1)"
          echo "  - Memory: $(sysctl -n hw.memsize | awk '{print $0/1024/1024/1024 " GB"}')"

          # Enhanced error handling
          set -euo pipefail
          trap 'echo "‚ùå Error occurred at line $LINENO. Exit code: $?" >&2; exit 1' ERR

          # Pre-build cleanup and optimization
          echo "üßπ Pre-build cleanup..."
          flutter clean
          rm -rf ~/.gradle/caches/ 2>/dev/null || true
          rm -rf .dart_tool/ 2>/dev/null || true

          # Optimize Gradle
          echo "‚ö° Optimizing Gradle configuration..."
          export GRADLE_OPTS="$GRADLE_OPTS"
          export GRADLE_DAEMON=true
          export GRADLE_PARALLEL=true

          # Enhanced Firebase validation
          echo "üî• Validating Firebase configuration..."
          if [ -n "$FIREBASE_CONFIG_ANDROID" ]; then
            echo "‚úÖ Firebase Android config URL provided: $FIREBASE_CONFIG_ANDROID"
            
            # Test URL accessibility
            if curl --output /dev/null --silent --head --fail "$FIREBASE_CONFIG_ANDROID"; then
              echo "‚úÖ Firebase config URL is accessible"
            else
              echo "‚ö†Ô∏è Firebase config URL is not accessible - will use fallback"
            fi
          else
            echo "‚ö†Ô∏è No Firebase Android config URL provided"
          fi
          
          if [ -n "$FIREBASE_CONFIG_IOS" ]; then
            echo "‚úÖ Firebase iOS config URL provided: $FIREBASE_CONFIG_IOS"
            
            # Test URL accessibility
            if curl --output /dev/null --silent --head --fail "$FIREBASE_CONFIG_IOS"; then
              echo "‚úÖ Firebase iOS config URL is accessible"
            else
              echo "‚ö†Ô∏è Firebase iOS config URL is not accessible - will use fallback"
            fi
          else
            echo "‚ö†Ô∏è No Firebase iOS config URL provided"
          fi

          # Verify keystore configuration
          if [ -n "$KEY_STORE_URL" ]; then
            echo "üîê Keystore configuration detected"
          else
            echo "‚ö†Ô∏è No keystore configuration provided"
          fi

          # Verify environment
          echo "‚úÖ Environment verification completed"

      - name: Build Android APK and AAB
        script: |
          # üè∑Ô∏è Step 1: Project Name Change (CRITICAL - Must be first!)
          echo "üè∑Ô∏è Step 1: Project Name Change for Dynamic Configuration..."
          echo "App Name: $APP_NAME"
          
          # 2Ô∏è‚É£ Sanitize: lowercase, remove special characters, replace spaces with underscores
          SANITIZED_NAME=$(echo "$APP_NAME" | tr '[:upper:]' '[:lower:]' | tr -cd 'a-z0-9 ' | tr ' ' '_')
          
          # 3Ô∏è‚É£ Extract old name from pubspec.yaml
          OLD_NAME_LINE=$(grep '^name: ' pubspec.yaml)
          OLD_NAME=$(echo "$OLD_NAME_LINE" | cut -d ' ' -f2)
          
          echo "üîÅ Renaming project from '$OLD_NAME' to '$SANITIZED_NAME'..."
          
          # Update pubspec.yaml
          sed -i '' "s/^name: .*/name: $SANITIZED_NAME/" pubspec.yaml
          
          # Update Dart imports
          echo "üîÑ Updating Dart package imports..."
          grep -rl "package:$OLD_NAME" lib/ | xargs sed -i '' "s/package:$OLD_NAME/package:$SANITIZED_NAME/g"
          
          # iOS: Update CFBundleName in Info.plist
          echo "üõ†Ô∏è Updating iOS CFBundleName..."
          plutil -replace CFBundleName -string "$APP_NAME" ios/Runner/Info.plist
          
          # Clean and get packages
          flutter clean
          flutter pub get
          
          echo "‚úÖ Project renamed to '$SANITIZED_NAME'"
          echo "üöÄ iOS CFBundleName set to '$APP_NAME'"
          
          # Make all scripts executable
          chmod +x lib/scripts/android/*.sh
          chmod +x lib/scripts/utils/*.sh
          chmod +x lib/scripts/ios-workflow/*.sh
          chmod +x lib/scripts/ios/*.sh
          chmod +x lib/scripts/combined/*.sh
          
          # Setup logo and app icons using flutter_launcher_icons
          echo "üé® Setting up logo for flutter_launcher_icons..."
          if [[ -f "lib/scripts/ios-workflow/setup_logo_for_icons.sh" ]]; then
            chmod +x lib/scripts/ios-workflow/setup_logo_for_icons.sh
            if ./lib/scripts/ios-workflow/setup_logo_for_icons.sh; then
              echo "‚úÖ Logo setup completed successfully"
              
              # Ensure dependencies are up to date
              echo "üì¶ Running flutter pub get..."
              if flutter pub get; then
                echo "‚úÖ Dependencies updated successfully"
                
                echo "üé® Generating app icons using flutter_launcher_icons..."
                if flutter pub run flutter_launcher_icons; then
                  echo "‚úÖ App icons generated successfully using flutter_launcher_icons"
                else
                  echo "‚ö†Ô∏è flutter_launcher_icons failed, continuing with build..."
                fi
              else
                echo "‚ö†Ô∏è flutter pub get failed, continuing with build..."
              fi
            else
              echo "‚ùå Logo setup failed, continuing with build..."
            fi
          else
            echo "‚ö†Ô∏è Logo setup script not found, continuing with build..."
          fi

          # Enhanced build with retry logic
          MAX_RETRIES=${MAX_RETRIES:-2}
          RETRY_COUNT=0

          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            echo "üèóÔ∏è Build attempt $((RETRY_COUNT + 1)) of $MAX_RETRIES"

            if ./lib/scripts/android/main.sh; then
              echo "‚úÖ Build completed successfully!"
              break
            else
              RETRY_COUNT=$((RETRY_COUNT + 1))
              if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                echo "‚ö†Ô∏è Build failed, retrying in 10 seconds..."
                sleep 10
                flutter clean
              else
                echo "‚ùå Build failed after $MAX_RETRIES attempts"
                exit 1
              fi
            fi
          done

    artifacts:
      - build/app/outputs/flutter-apk/app-release.apk
      - build/app/outputs/bundle/release/app-release.aab
      - output/android/app-release.apk
      - output/android/app-release.aab
      - build/app/outputs/mapping/release/mapping.txt
      - build/app/outputs/logs/

  # üåê Combined Workflow - Universal Build (Android + iOS)
  combined:
    name: Universal Combined Build (Android + iOS)
    max_build_duration: 150
    instance_type: mac_mini_m2
    environment:
      flutter: 3.32.2
      java: 17
      xcode: 15.4
      cocoapods: 1.16.2
      vars:
        # üîß Build Stability Variables
        GRADLE_OPTS: "-Xmx12G -XX:MaxMetaspaceSize=3G -XX:ReservedCodeCacheSize=1G -XX:+UseG1GC -XX:MaxGCPauseMillis=50 -XX:+UseStringDeduplication -XX:+OptimizeStringConcat -XX:+TieredCompilation -XX:TieredStopAtLevel=1"
        XCODE_PARALLEL_JOBS: "8"
        GRADLE_DAEMON: "true"
        GRADLE_PARALLEL: "true"
        GRADLE_CACHING: "true"
        GRADLE_OFFLINE: "false"
        GRADLE_CONFIGURE_ON_DEMAND: "true"
        GRADLE_BUILD_CACHE: "true"
        GRADLE_WORKER_MAX_HEAP_SIZE: "2G"
        FLUTTER_PUB_CACHE: "true"
        FLUTTER_VERBOSE: "false"
        FLUTTER_ANALYZE: "true"
        FLUTTER_TEST: "false"
        FLUTTER_BUILD_NUMBER: "auto"
        ASSET_OPTIMIZATION: "true"
        IMAGE_COMPRESSION: "true"
        PARALLEL_DOWNLOADS: "true"
        DOWNLOAD_TIMEOUT: "300"
        DOWNLOAD_RETRIES: "3"
        FAIL_ON_WARNINGS: "false"
        CONTINUE_ON_ERROR: "true"
        RETRY_ON_FAILURE: "true"
        MAX_RETRIES: "3"
        ENABLE_BUILD_RECOVERY: "true"
        CLEAN_ON_FAILURE: "true"
        CACHE_ON_SUCCESS: "true"

        # üçé iOS Build Acceleration
        XCODE_FAST_BUILD: "true"
        COCOAPODS_FAST_INSTALL: "true"
        XCODE_SKIP_SIGNING: "false"
        XCODE_OPTIMIZATION: "true"
        XCODE_CLEAN_BUILD: "true"
        XCODE_PARALLEL_BUILD: "true"

        # üìß Email Notifications
        ENABLE_EMAIL_NOTIFICATIONS: $ENABLE_EMAIL_NOTIFICATIONS
        EMAIL_SMTP_SERVER: $EMAIL_SMTP_SERVER
        EMAIL_SMTP_PORT: $EMAIL_SMTP_PORT
        EMAIL_SMTP_USER: $EMAIL_SMTP_USER
        EMAIL_SMTP_PASS: $EMAIL_SMTP_PASS

        # üîê OAuth Authentication
        IS_GOOGLE_AUTH: $IS_GOOGLE_AUTH
        IS_APPLE_AUTH: $IS_APPLE_AUTH

        # üì± App Configuration
        WORKFLOW_ID: "combined"
        PROJECT_ID: $PROJECT_ID
        APP_ID: $APP_ID
        BRANCH: $BRANCH
        VERSION_NAME: $VERSION_NAME
        VERSION_CODE: $VERSION_CODE
        APP_NAME: $APP_NAME
        ORG_NAME: $ORG_NAME
        WEB_URL: $WEB_URL
        EMAIL_ID: $EMAIL_ID
        USER_NAME: $USER_NAME
        PKG_NAME: $PKG_NAME
        BUNDLE_ID: $BUNDLE_ID

        # üîß Feature Flags
        PUSH_NOTIFY: $PUSH_NOTIFY
        IS_DOMAIN_URL: $IS_DOMAIN_URL
        IS_CHATBOT: $IS_CHATBOT
        IS_SPLASH: $IS_SPLASH
        IS_PULLDOWN: $IS_PULLDOWN
        IS_BOTTOMMENU: $IS_BOTTOMMENU
        IS_LOAD_IND: $IS_LOAD_IND

        # üîê Permissions
        IS_CAMERA: $IS_CAMERA
        IS_LOCATION: $IS_LOCATION
        IS_MIC: $IS_MIC
        IS_NOTIFICATION: $IS_NOTIFICATION
        IS_CONTACT: $IS_CONTACT
        IS_BIOMETRIC: $IS_BIOMETRIC
        IS_CALENDAR: $IS_CALENDAR
        IS_STORAGE: $IS_STORAGE

        # üé® UI Configuration
        LOGO_URL: $LOGO_URL
        SPLASH_URL: $SPLASH_URL
        SPLASH_BG_URL: $SPLASH_BG_URL
        SPLASH_BG_COLOR: $SPLASH_BG_COLOR
        SPLASH_TAGLINE: $SPLASH_TAGLINE
        SPLASH_TAGLINE_COLOR: $SPLASH_TAGLINE_COLOR
        SPLASH_TAGLINE_FONT: $SPLASH_TAGLINE_FONT
        SPLASH_TAGLINE_SIZE: $SPLASH_TAGLINE_SIZE
        SPLASH_TAGLINE_BOLD: $SPLASH_TAGLINE_BOLD
        SPLASH_TAGLINE_ITALIC: $SPLASH_TAGLINE_ITALIC
        SPLASH_ANIMATION: $SPLASH_ANIMATION
        SPLASH_DURATION: $SPLASH_DURATION
        BOTTOMMENU_ITEMS: $BOTTOMMENU_ITEMS
        BOTTOMMENU_BG_COLOR: $BOTTOMMENU_BG_COLOR
        BOTTOMMENU_ICON_COLOR: $BOTTOMMENU_ICON_COLOR
        BOTTOMMENU_TEXT_COLOR: $BOTTOMMENU_TEXT_COLOR
        BOTTOMMENU_FONT: $BOTTOMMENU_FONT
        BOTTOMMENU_FONT_SIZE: $BOTTOMMENU_FONT_SIZE
        BOTTOMMENU_FONT_BOLD: $BOTTOMMENU_FONT_BOLD
        BOTTOMMENU_FONT_ITALIC: $BOTTOMMENU_FONT_ITALIC
        BOTTOMMENU_ACTIVE_TAB_COLOR: $BOTTOMMENU_ACTIVE_TAB_COLOR
        BOTTOMMENU_ICON_POSITION: $BOTTOMMENU_ICON_POSITION

        # üî• Firebase Configuration
        FIREBASE_CONFIG_ANDROID: $FIREBASE_CONFIG_ANDROID
        FIREBASE_CONFIG_IOS: $FIREBASE_CONFIG_IOS

        # üîê Android Keystore Configuration
        KEY_STORE_URL: $KEY_STORE_URL
        CM_KEYSTORE_PASSWORD: $CM_KEYSTORE_PASSWORD
        CM_KEY_ALIAS: $CM_KEY_ALIAS
        CM_KEY_PASSWORD: $CM_KEY_PASSWORD

        # üçé iOS Signing Configuration
        APPLE_TEAM_ID: $APPLE_TEAM_ID
        APNS_KEY_ID: $APNS_KEY_ID
        APNS_AUTH_KEY_URL: $APNS_AUTH_KEY_URL
        CERT_PASSWORD: $CERT_PASSWORD
        PROFILE_URL: $PROFILE_URL
        CERT_P12_URL: $CERT_P12_URL
        CERT_CER_URL: $CERT_CER_URL
        CERT_KEY_URL: $CERT_KEY_URL
        PROFILE_TYPE: $PROFILE_TYPE
        APP_STORE_CONNECT_KEY_IDENTIFIER: $APP_STORE_CONNECT_KEY_IDENTIFIER
        APP_STORE_CONNECT_ISSUER_ID: $APP_STORE_CONNECT_ISSUER_ID
        APP_STORE_CONNECT_API_KEY_URL: $APP_STORE_CONNECT_API_KEY_URL
        IS_TESTFLIGHT: $IS_TESTFLIGHT

        # üì± iOS Distribution Options
        ENABLE_DEVICE_SPECIFIC_BUILDS: $ENABLE_DEVICE_SPECIFIC_BUILDS
        INSTALL_URL: $INSTALL_URL
        DISPLAY_IMAGE_URL: $DISPLAY_IMAGE_URL
        FULL_SIZE_IMAGE_URL: $FULL_SIZE_IMAGE_URL
        THINNING: $THINNING

    scripts:
      - name: Pre-build Setup
        script: |
          # üè∑Ô∏è Step 1: Project Name Change (CRITICAL - Must be first!)
          echo "üè∑Ô∏è Step 1: Project Name Change for Dynamic Configuration..."
          echo "App Name: $APP_NAME"
          
          # 2Ô∏è‚É£ Sanitize: lowercase, remove special characters, replace spaces with underscores
          SANITIZED_NAME=$(echo "$APP_NAME" | tr '[:upper:]' '[:lower:]' | tr -cd 'a-z0-9 ' | tr ' ' '_')
          
          # 3Ô∏è‚É£ Extract old name from pubspec.yaml
          OLD_NAME_LINE=$(grep '^name: ' pubspec.yaml)
          OLD_NAME=$(echo "$OLD_NAME_LINE" | cut -d ' ' -f2)
          
          echo "üîÅ Renaming project from '$OLD_NAME' to '$SANITIZED_NAME'..."
          
          # Update pubspec.yaml
          sed -i '' "s/^name: .*/name: $SANITIZED_NAME/" pubspec.yaml
          
          # Update Dart imports
          echo "üîÑ Updating Dart package imports..."
          grep -rl "package:$OLD_NAME" lib/ | xargs sed -i '' "s/package:$OLD_NAME/package:$SANITIZED_NAME/g"
          
          # iOS: Update CFBundleName in Info.plist
          echo "üõ†Ô∏è Updating iOS CFBundleName..."
          plutil -replace CFBundleName -string "$APP_NAME" ios/Runner/Info.plist
          
          # Clean and get packages
          flutter clean
          flutter pub get
          
          echo "‚úÖ Project renamed to '$SANITIZED_NAME'"
          echo "üöÄ iOS CFBundleName set to '$APP_NAME'"
          
          echo "üöÄ Starting Universal Combined Build with enhanced success rate optimizations..."
          echo "üìä Build Environment:"
          echo "  - Flutter: $(flutter --version | head -1)"
          echo "  - Java: $(java -version 2>&1 | head -1)"
          echo "  - Xcode: $(xcodebuild -version | head -1)"
          echo "  - CocoaPods: $(pod --version)"
          echo "  - Gradle: $(./android/gradlew --version | grep "Gradle" | head -1)"
          echo "  - Memory: $(sysctl -n hw.memsize | awk '{print $0/1024/1024/1024 " GB"}')"

          # Enhanced error handling
          set -euo pipefail
          trap 'echo "‚ùå Error occurred at line $LINENO. Exit code: $?" >&2; exit 1' ERR

          # Pre-build cleanup and optimization
          echo "üßπ Pre-build cleanup..."
          flutter clean
          rm -rf ~/.gradle/caches/ 2>/dev/null || true
          rm -rf .dart_tool/ 2>/dev/null || true
          rm -rf ios/Pods/ 2>/dev/null || true
          rm -rf ios/build/ 2>/dev/null || true

          # Optimize Gradle
          echo "‚ö° Optimizing Gradle configuration..."
          export GRADLE_OPTS="$GRADLE_OPTS"
          export GRADLE_DAEMON=true
          export GRADLE_PARALLEL=true

          # Optimize Xcode
          echo "‚ö° Optimizing Xcode configuration..."
          export XCODE_FAST_BUILD=true
          export COCOAPODS_FAST_INSTALL=true

          # Enhanced Firebase validation
          echo "üî• Validating Firebase configuration..."
          if [ -n "$FIREBASE_CONFIG_ANDROID" ]; then
            echo "‚úÖ Android Firebase config URL provided: $FIREBASE_CONFIG_ANDROID"
            
            # Test URL accessibility
            if curl --output /dev/null --silent --head --fail "$FIREBASE_CONFIG_ANDROID"; then
              echo "‚úÖ Android Firebase config URL is accessible"
            else
              echo "‚ö†Ô∏è Android Firebase config URL is not accessible - will use fallback"
            fi
          else
            echo "‚ö†Ô∏è No Android Firebase config URL provided"
          fi
          
          if [ -n "$FIREBASE_CONFIG_IOS" ]; then
            echo "‚úÖ iOS Firebase config URL provided: $FIREBASE_CONFIG_IOS"
            
            # Test URL accessibility
            if curl --output /dev/null --silent --head --fail "$FIREBASE_CONFIG_IOS"; then
              echo "‚úÖ iOS Firebase config URL is accessible"
            else
              echo "‚ö†Ô∏è iOS Firebase config URL is not accessible - will use fallback"
            fi
          else
            echo "‚ö†Ô∏è No iOS Firebase config URL provided"
          fi

          # Verify Android keystore configuration
          if [ -n "$KEY_STORE_URL" ]; then
            echo "üîê Android keystore configuration detected"
          else
            echo "‚ö†Ô∏è No Android keystore configuration provided"
          fi

          # Verify iOS signing configuration
          if [ -n "$CERT_PASSWORD" ] && [ -n "$PROFILE_URL" ]; then
            echo "üîê iOS signing configuration detected"
          else
            echo "‚ö†Ô∏è Incomplete iOS signing configuration"
          fi

          # Verify environment
          echo "‚úÖ Environment verification completed"

          # Step 11.5: Multi-Platform Icon Setup using flutter_launcher_icons
          echo "üñºÔ∏è Step 11.5: Multi-Platform Icon Setup for Store Compliance..."
          
          # Setup logo and app icons for both platforms using flutter_launcher_icons
          echo "üé® Setting up logo for flutter_launcher_icons..."
          if [[ -f "lib/scripts/ios-workflow/setup_logo_for_icons.sh" ]]; then
            chmod +x lib/scripts/ios-workflow/setup_logo_for_icons.sh
            if ./lib/scripts/ios-workflow/setup_logo_for_icons.sh; then
              echo "‚úÖ Logo setup completed successfully"
              
              # Ensure dependencies are up to date
              echo "üì¶ Running flutter pub get..."
              if flutter pub get; then
                echo "‚úÖ Dependencies updated successfully"
                
                echo "üé® Generating app icons for both platforms using flutter_launcher_icons..."
                if flutter pub run flutter_launcher_icons; then
                  echo "‚úÖ Multi-platform app icons generated successfully using flutter_launcher_icons"
                  echo "üì± Both platforms should now pass store validation"
                else
                  echo "‚ö†Ô∏è flutter_launcher_icons failed"
                  echo "‚ö†Ô∏è Apps may fail store validation due to missing icons"
                  # Continue anyway as this is not critical for the build
                fi
              else
                echo "‚ö†Ô∏è flutter pub get failed"
                echo "‚ö†Ô∏è Apps may fail store validation due to missing icons"
                # Continue anyway as this is not critical for the build
              fi
            else
              echo "‚ùå Logo setup failed"
              echo "‚ö†Ô∏è Apps may fail store validation due to missing icons"
              # Continue anyway as this is not critical for the build
            fi
          else
            echo "‚ö†Ô∏è Logo setup script not found"
            echo "‚ö†Ô∏è Apps may fail store validation due to missing icons"
            # Continue anyway as this is not critical for the build
          fi

      - name: Universal Combined Build
        script: |
          # Make all scripts executable
          chmod +x lib/scripts/combined/*.sh
          chmod +x lib/scripts/utils/*.sh
          chmod +x lib/scripts/android/*.sh
          chmod +x lib/scripts/ios-workflow/*.sh
          chmod +x lib/scripts/ios/*.sh
          chmod +x lib/scripts/combined/*.sh
          
          # Setup logo and app icons using flutter_launcher_icons
          echo "üé® Setting up logo for flutter_launcher_icons..."
          if [[ -f "lib/scripts/ios-workflow/setup_logo_for_icons.sh" ]]; then
            chmod +x lib/scripts/ios-workflow/setup_logo_for_icons.sh
            if ./lib/scripts/ios-workflow/setup_logo_for_icons.sh; then
              echo "‚úÖ Logo setup completed successfully"
              
              # Ensure dependencies are up to date
              echo "üì¶ Running flutter pub get..."
              if flutter pub get; then
                echo "‚úÖ Dependencies updated successfully"
                
                echo "üé® Generating app icons using flutter_launcher_icons..."
                if flutter pub run flutter_launcher_icons; then
                  echo "‚úÖ App icons generated successfully using flutter_launcher_icons"
                else
                  echo "‚ö†Ô∏è flutter_launcher_icons failed, continuing with build..."
                fi
              else
                echo "‚ö†Ô∏è flutter pub get failed, continuing with build..."
              fi
            else
              echo "‚ùå Logo setup failed, continuing with build..."
            fi
          else
            echo "‚ö†Ô∏è Logo setup script not found, continuing with build..."
          fi

          # Enhanced build with retry logic and dynamic workflow support
          MAX_RETRIES=${MAX_RETRIES:-3}
          RETRY_COUNT=0

          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            echo "üèóÔ∏è Build attempt $((RETRY_COUNT + 1)) of $MAX_RETRIES"

            if ./lib/scripts/combined/main.sh; then
              echo "‚úÖ Combined build completed successfully!"
              break
            else
              RETRY_COUNT=$((RETRY_COUNT + 1))
              if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                echo "‚ö†Ô∏è Combined build failed, retrying in 15 seconds..."
                sleep 15
                flutter clean
                # Clean iOS build artifacts as well
                rm -rf ios/build/ 2>/dev/null || true
                rm -rf ios/Pods/ 2>/dev/null || true
              else
                echo "‚ùå Combined build failed after $MAX_RETRIES attempts"
                exit 1
              fi
            fi
          done

    artifacts:
      - build/app/outputs/flutter-apk/app-release.apk
      - build/app/outputs/bundle/release/app-release.aab
      - build/ios/ipa/*.ipa
      - ios/build/ios/ipa/*.ipa
      - output/android/app-release.apk
      - output/android/app-release.aab
      - output/ios/Runner.ipa
      - build/app/outputs/mapping/release/mapping.txt
      - build/app/outputs/logs/
      - build/ios/logs/
